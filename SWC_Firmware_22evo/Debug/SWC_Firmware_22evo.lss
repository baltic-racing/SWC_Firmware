
SWC_Firmware_22evo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000456  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800100  00800100  00000456  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f41  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6b  00000000  00000000  000014a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c4  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000027d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068b  00000000  00000000  00002910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000304  00000000  00000000  00002f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000329f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a9 c1       	rjmp	.+850    	; 0x394 <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a5 31       	cpi	r26, 0x15	; 21
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	00 d1       	rcall	.+512    	; 0x2b2 <main>
  b2:	95 c1       	rjmp	.+810    	; 0x3de <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <can_check_free>:
  b6:	88 30       	cpi	r24, 0x08	; 8
  b8:	78 f0       	brcs	.+30     	; 0xd8 <can_check_free+0x22>
  ba:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 97       	sbiw	r24, 0x08	; 8
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <can_check_free+0x14>
  c6:	35 95       	asr	r19
  c8:	27 95       	ror	r18
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <can_check_free+0x10>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	20 ff       	sbrs	r18, 0
  d2:	0d c0       	rjmp	.+26     	; 0xee <can_check_free+0x38>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	08 95       	ret
  d8:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <can_check_free+0x2e>
  e0:	35 95       	asr	r19
  e2:	27 95       	ror	r18
  e4:	8a 95       	dec	r24
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <can_check_free+0x2a>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	20 fd       	sbrc	r18, 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret

000000f0 <can_cfg>:
  f0:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	29 c0       	rjmp	.+82     	; 0x14a <can_cfg+0x5a>
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	48 9f       	mul	r20, r24
  fc:	90 01       	movw	r18, r0
  fe:	11 24       	eor	r1, r1
 100:	82 2f       	mov	r24, r18
 102:	88 60       	ori	r24, 0x08	; 8
 104:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 108:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 10c:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 110:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 114:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 118:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 11c:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 120:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 124:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 128:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 12c:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	08 c0       	rjmp	.+16     	; 0x144 <can_cfg+0x54>
 134:	98 2f       	mov	r25, r24
 136:	92 2b       	or	r25, r18
 138:	98 60       	ori	r25, 0x08	; 8
 13a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 13e:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	88 30       	cpi	r24, 0x08	; 8
 146:	b0 f3       	brcs	.-20     	; 0x134 <can_cfg+0x44>
 148:	4f 5f       	subi	r20, 0xFF	; 255
 14a:	4f 30       	cpi	r20, 0x0F	; 15
 14c:	a8 f2       	brcs	.-86     	; 0xf8 <can_cfg+0x8>
 14e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 158:	86 e3       	ldi	r24, 0x36	; 54
 15a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 15e:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 162:	e8 ed       	ldi	r30, 0xD8	; 216
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <can_tx>:
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	10 c0       	rjmp	.+32     	; 0x198 <can_tx+0x2a>
 178:	8c 81       	ldd	r24, Y+4	; 0x04
 17a:	30 e1       	ldi	r19, 0x10	; 16
 17c:	83 9f       	mul	r24, r19
 17e:	c0 01       	movw	r24, r0
 180:	11 24       	eor	r1, r1
 182:	82 2b       	or	r24, r18
 184:	88 60       	ori	r24, 0x08	; 8
 186:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 18a:	fb 01       	movw	r30, r22
 18c:	e2 0f       	add	r30, r18
 18e:	f1 1d       	adc	r31, r1
 190:	80 81       	ld	r24, Z
 192:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 196:	2f 5f       	subi	r18, 0xFF	; 255
 198:	28 30       	cpi	r18, 0x08	; 8
 19a:	70 f3       	brcs	.-36     	; 0x178 <can_tx+0xa>
 19c:	8c 81       	ldd	r24, Y+4	; 0x04
 19e:	82 95       	swap	r24
 1a0:	80 7f       	andi	r24, 0xF0	; 240
 1a2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1a6:	8c 81       	ldd	r24, Y+4	; 0x04
 1a8:	86 df       	rcall	.-244    	; 0xb6 <can_check_free>
 1aa:	88 23       	and	r24, r24
 1ac:	21 f1       	breq	.+72     	; 0x1f6 <can_tx+0x88>
 1ae:	ee ee       	ldi	r30, 0xEE	; 238
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	10 82       	st	Z, r1
 1b4:	88 81       	ld	r24, Y
 1b6:	99 81       	ldd	r25, Y+1	; 0x01
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1c8:	88 81       	ld	r24, Y
 1ca:	82 95       	swap	r24
 1cc:	88 0f       	add	r24, r24
 1ce:	80 7e       	andi	r24, 0xE0	; 224
 1d0:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1d4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1d8:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1dc:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 1e0:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 1e4:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 1e8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 1ec:	10 82       	st	Z, r1
 1ee:	88 e4       	ldi	r24, 0x48	; 72
 1f0:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1f4:	10 82       	st	Z, r1
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <read_inputs>:
				}
		}	
	 }
}

void read_inputs(){
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
	//Reads inputs of following buttons:...
	SWC_databytes[0] = graytobcd((~PINB)&0b00001111); //Rotary Encoder left
 200:	83 b1       	in	r24, 0x03	; 3
 202:	80 95       	com	r24
 204:	8f 70       	andi	r24, 0x0F	; 15
 206:	a6 d0       	rcall	.+332    	; 0x354 <graytobcd>
 208:	cd e0       	ldi	r28, 0x0D	; 13
 20a:	d1 e0       	ldi	r29, 0x01	; 1
 20c:	88 83       	st	Y, r24
	SWC_databytes[1] = graytobcd((~PINB)>>4); //Rotary Encoder right
 20e:	83 b1       	in	r24, 0x03	; 3
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	80 95       	com	r24
 214:	90 95       	com	r25
 216:	95 95       	asr	r25
 218:	87 95       	ror	r24
 21a:	95 95       	asr	r25
 21c:	87 95       	ror	r24
 21e:	95 95       	asr	r25
 220:	87 95       	ror	r24
 222:	95 95       	asr	r25
 224:	87 95       	ror	r24
 226:	96 d0       	rcall	.+300    	; 0x354 <graytobcd>
 228:	89 83       	std	Y+1, r24	; 0x01
	SWC_databytes[2] = (((~PINA)>>PA0)&1); //Push button left
 22a:	90 b1       	in	r25, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	89 27       	eor	r24, r25
 230:	81 70       	andi	r24, 0x01	; 1
 232:	8a 83       	std	Y+2, r24	; 0x02
	SWC_databytes[3] = (((~PINA)>>PA1)&1); //Push button right
 234:	80 b1       	in	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	80 95       	com	r24
 23a:	90 95       	com	r25
 23c:	95 95       	asr	r25
 23e:	87 95       	ror	r24
 240:	81 70       	andi	r24, 0x01	; 1
 242:	8b 83       	std	Y+3, r24	; 0x03
	SWC_databytes[4] = (((~PINA)>>PA2)&1);	//Switch 1 (right)
 244:	80 b1       	in	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	80 95       	com	r24
 24a:	90 95       	com	r25
 24c:	95 95       	asr	r25
 24e:	87 95       	ror	r24
 250:	95 95       	asr	r25
 252:	87 95       	ror	r24
 254:	81 70       	andi	r24, 0x01	; 1
 256:	8c 83       	std	Y+4, r24	; 0x04
	SWC_databytes[5] = (((~PINA)>>PA3)&1); //Switch 2 (right)
 258:	80 b1       	in	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	80 95       	com	r24
 25e:	90 95       	com	r25
 260:	95 95       	asr	r25
 262:	87 95       	ror	r24
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	95 95       	asr	r25
 26a:	87 95       	ror	r24
 26c:	81 70       	andi	r24, 0x01	; 1
 26e:	8d 83       	std	Y+5, r24	; 0x05
	SWC_databytes[6] = (((~PINA)>>PA4)&1); //Switch 3 (left)
 270:	80 b1       	in	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	80 95       	com	r24
 276:	90 95       	com	r25
 278:	95 95       	asr	r25
 27a:	87 95       	ror	r24
 27c:	95 95       	asr	r25
 27e:	87 95       	ror	r24
 280:	95 95       	asr	r25
 282:	87 95       	ror	r24
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	81 70       	andi	r24, 0x01	; 1
 28a:	8e 83       	std	Y+6, r24	; 0x06
	SWC_databytes[7] = (((~PINA)>>PA5)&1); //Switch 4 (left)
 28c:	80 b1       	in	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	95 95       	asr	r25
 296:	87 95       	ror	r24
 298:	95 95       	asr	r25
 29a:	87 95       	ror	r24
 29c:	95 95       	asr	r25
 29e:	87 95       	ror	r24
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	81 70       	andi	r24, 0x01	; 1
 2aa:	8f 83       	std	Y+7, r24	; 0x07
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <main>:
struct CAN_MOB can_SWC_mob;
uint8_t SWC_databytes[8];

int main(void)
{
	sei(); //enables interrupts
 2b2:	78 94       	sei
    
	port_config();
 2b4:	46 d0       	rcall	.+140    	; 0x342 <port_config>
	timer_config();
 2b6:	61 d0       	rcall	.+194    	; 0x37a <timer_config>
	can_cfg();
 2b8:	1b df       	rcall	.-458    	; 0xf0 <can_cfg>
 2ba:	e8 e0       	ldi	r30, 0x08	; 8

	
	can_SWC_mob.mob_id = 0x750;
 2bc:	f1 e0       	ldi	r31, 0x01	; 1
 2be:	80 e5       	ldi	r24, 0x50	; 80
 2c0:	97 e0       	ldi	r25, 0x07	; 7
 2c2:	91 83       	std	Z+1, r25	; 0x01
 2c4:	80 83       	st	Z, r24
 2c6:	13 82       	std	Z+3, r1	; 0x03
	can_SWC_mob.mob_idmask = 0; //transmission needs no masking
 2c8:	12 82       	std	Z+2, r1	; 0x02
 2ca:	14 82       	std	Z+4, r1	; 0x04
	can_SWC_mob.mob_number = 0;
 2cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <system_time>

    while (1) 
    {
		
		if(system_time > 10){								//every 10ms the Controller becomes active... (100hz)
 2d0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <system_time+0x1>
 2d4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <system_time+0x2>
 2d8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <system_time+0x3>
 2dc:	0b 97       	sbiw	r24, 0x0b	; 11
 2de:	a1 05       	cpc	r26, r1
 2e0:	b1 05       	cpc	r27, r1
 2e2:	a0 f3       	brcs	.-24     	; 0x2cc <main+0x1a>
 2e4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <system_time>
				system_time = 0;
 2e8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <system_time+0x1>
 2ec:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <system_time+0x2>
 2f0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <system_time+0x3>
				read_inputs();								 //saves input data to mob array	
 2f4:	83 df       	rcall	.-250    	; 0x1fc <read_inputs>
 2f6:	6d e0       	ldi	r22, 0x0D	; 13
				can_tx(&can_SWC_mob, SWC_databytes);		//transmits collected data to CAN bus
 2f8:	71 e0       	ldi	r23, 0x01	; 1
 2fa:	88 e0       	ldi	r24, 0x08	; 8
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	37 df       	rcall	.-402    	; 0x16e <can_tx>
 300:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
				system_time_extended++;
 304:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 308:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 30c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	a1 1d       	adc	r26, r1
 314:	b1 1d       	adc	r27, r1
 316:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 31a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 31e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 322:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
				
				if(system_time_extended > 10){
 326:	0b 97       	sbiw	r24, 0x0b	; 11
 328:	a1 05       	cpc	r26, r1
 32a:	b1 05       	cpc	r27, r1
 32c:	78 f2       	brcs	.-98     	; 0x2cc <main+0x1a>
					toggle_BL();							//toggles state of heart LED every 100ms
 32e:	2d d0       	rcall	.+90     	; 0x38a <toggle_BL>
 330:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
					system_time_extended = 0;
 334:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 338:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 33c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 340:	c5 cf       	rjmp	.-118    	; 0x2cc <main+0x1a>

00000342 <port_config>:
 342:	11 b8       	out	0x01, r1	; 1
 344:	9f ef       	ldi	r25, 0xFF	; 255
 346:	92 b9       	out	0x02, r25	; 2
 348:	87 b1       	in	r24, 0x07	; 7
 34a:	85 60       	ori	r24, 0x05	; 5
 34c:	87 b9       	out	0x07, r24	; 7
 34e:	14 b8       	out	0x04, r1	; 4
 350:	95 b9       	out	0x05, r25	; 5
 352:	08 95       	ret

00000354 <graytobcd>:
 354:	38 2f       	mov	r19, r24
 356:	38 70       	andi	r19, 0x08	; 8
 358:	93 2f       	mov	r25, r19
 35a:	96 95       	lsr	r25
 35c:	98 27       	eor	r25, r24
 35e:	94 70       	andi	r25, 0x04	; 4
 360:	29 2f       	mov	r18, r25
 362:	23 2b       	or	r18, r19
 364:	92 2f       	mov	r25, r18
 366:	96 95       	lsr	r25
 368:	98 27       	eor	r25, r24
 36a:	92 70       	andi	r25, 0x02	; 2
 36c:	92 2b       	or	r25, r18
 36e:	29 2f       	mov	r18, r25
 370:	26 95       	lsr	r18
 372:	82 27       	eor	r24, r18
 374:	81 70       	andi	r24, 0x01	; 1
 376:	89 2b       	or	r24, r25
 378:	08 95       	ret

0000037a <timer_config>:
 37a:	8b e0       	ldi	r24, 0x0B	; 11
 37c:	84 bd       	out	0x24, r24	; 36
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 384:	89 ef       	ldi	r24, 0xF9	; 249
 386:	87 bd       	out	0x27, r24	; 39
 388:	08 95       	ret

0000038a <toggle_BL>:
 38a:	98 b1       	in	r25, 0x08	; 8
 38c:	84 e0       	ldi	r24, 0x04	; 4
 38e:	89 27       	eor	r24, r25
 390:	88 b9       	out	0x08, r24	; 8
 392:	08 95       	ret

00000394 <__vector_16>:
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
 3a2:	af 93       	push	r26
 3a4:	bf 93       	push	r27
 3a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <system_time>
 3aa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <system_time+0x1>
 3ae:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <system_time+0x2>
 3b2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <system_time+0x3>
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	a1 1d       	adc	r26, r1
 3ba:	b1 1d       	adc	r27, r1
 3bc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <system_time>
 3c0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <system_time+0x1>
 3c4:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <system_time+0x2>
 3c8:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <system_time+0x3>
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <_exit>:
 3de:	f8 94       	cli

000003e0 <__stop_program>:
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <__stop_program>
